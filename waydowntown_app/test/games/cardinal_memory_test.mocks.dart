// Mocks generated by Mockito 5.4.4 from annotations
// in waydowntown/test/games/cardinal_memory_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/services.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:motion_sensors/motion_sensors.dart' as _i4;
import 'package:vector_math/vector_math_64.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMatrix4_0 extends _i1.SmartFake implements _i2.Matrix4 {
  _FakeMatrix4_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVector3_1 extends _i1.SmartFake implements _i3.Vector3 {
  _FakeVector3_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MotionSensors].
///
/// See the documentation for Mockito's code generation for more information.
class MockMotionSensors extends _i1.Mock implements _i4.MotionSensors {
  MockMotionSensors() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set accelerometerUpdateInterval(int? interval) => super.noSuchMethod(
        Invocation.setter(
          #accelerometerUpdateInterval,
          interval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set magnetometerUpdateInterval(int? interval) => super.noSuchMethod(
        Invocation.setter(
          #magnetometerUpdateInterval,
          interval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set gyroscopeUpdateInterval(int? interval) => super.noSuchMethod(
        Invocation.setter(
          #gyroscopeUpdateInterval,
          interval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set userAccelerometerUpdateInterval(int? interval) => super.noSuchMethod(
        Invocation.setter(
          #userAccelerometerUpdateInterval,
          interval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set orientationUpdateInterval(int? interval) => super.noSuchMethod(
        Invocation.setter(
          #orientationUpdateInterval,
          interval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set absoluteOrientationUpdateInterval(int? interval) => super.noSuchMethod(
        Invocation.setter(
          #absoluteOrientationUpdateInterval,
          interval,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Stream<_i4.AccelerometerEvent> get accelerometer => (super.noSuchMethod(
        Invocation.getter(#accelerometer),
        returnValue: _i5.Stream<_i4.AccelerometerEvent>.empty(),
      ) as _i5.Stream<_i4.AccelerometerEvent>);

  @override
  _i5.Stream<_i4.GyroscopeEvent> get gyroscope => (super.noSuchMethod(
        Invocation.getter(#gyroscope),
        returnValue: _i5.Stream<_i4.GyroscopeEvent>.empty(),
      ) as _i5.Stream<_i4.GyroscopeEvent>);

  @override
  _i5.Stream<_i4.UserAccelerometerEvent> get userAccelerometer =>
      (super.noSuchMethod(
        Invocation.getter(#userAccelerometer),
        returnValue: _i5.Stream<_i4.UserAccelerometerEvent>.empty(),
      ) as _i5.Stream<_i4.UserAccelerometerEvent>);

  @override
  _i5.Stream<_i4.MagnetometerEvent> get magnetometer => (super.noSuchMethod(
        Invocation.getter(#magnetometer),
        returnValue: _i5.Stream<_i4.MagnetometerEvent>.empty(),
      ) as _i5.Stream<_i4.MagnetometerEvent>);

  @override
  _i5.Stream<_i4.OrientationEvent> get orientation => (super.noSuchMethod(
        Invocation.getter(#orientation),
        returnValue: _i5.Stream<_i4.OrientationEvent>.empty(),
      ) as _i5.Stream<_i4.OrientationEvent>);

  @override
  _i5.Stream<_i4.AbsoluteOrientationEvent> get absoluteOrientation =>
      (super.noSuchMethod(
        Invocation.getter(#absoluteOrientation),
        returnValue: _i5.Stream<_i4.AbsoluteOrientationEvent>.empty(),
      ) as _i5.Stream<_i4.AbsoluteOrientationEvent>);

  @override
  _i5.Stream<_i4.ScreenOrientationEvent> get screenOrientation =>
      (super.noSuchMethod(
        Invocation.getter(#screenOrientation),
        returnValue: _i5.Stream<_i4.ScreenOrientationEvent>.empty(),
      ) as _i5.Stream<_i4.ScreenOrientationEvent>);

  @override
  _i5.Future<bool> isSensorAvailable(int? sensorType) => (super.noSuchMethod(
        Invocation.method(
          #isSensorAvailable,
          [sensorType],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isAccelerometerAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isAccelerometerAvailable,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isMagnetometerAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isMagnetometerAvailable,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isGyroscopeAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isGyroscopeAvailable,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isUserAccelerationAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isUserAccelerationAvailable,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isOrientationAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isOrientationAvailable,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> isAbsoluteOrientationAvailable() => (super.noSuchMethod(
        Invocation.method(
          #isAbsoluteOrientationAvailable,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<dynamic> setSensorUpdateInterval(
    int? sensorType,
    int? interval,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setSensorUpdateInterval,
          [
            sensorType,
            interval,
          ],
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  _i2.Matrix4 getRotationMatrix(
    _i3.Vector3? gravity,
    _i3.Vector3? geomagnetic,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRotationMatrix,
          [
            gravity,
            geomagnetic,
          ],
        ),
        returnValue: _FakeMatrix4_0(
          this,
          Invocation.method(
            #getRotationMatrix,
            [
              gravity,
              geomagnetic,
            ],
          ),
        ),
      ) as _i2.Matrix4);

  @override
  _i3.Vector3 getOrientation(_i2.Matrix4? m) => (super.noSuchMethod(
        Invocation.method(
          #getOrientation,
          [m],
        ),
        returnValue: _FakeVector3_1(
          this,
          Invocation.method(
            #getOrientation,
            [m],
          ),
        ),
      ) as _i3.Vector3);
}
