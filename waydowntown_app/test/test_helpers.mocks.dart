// Mocks generated by Mockito 5.4.4 from annotations
// in waydowntown/test/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:phoenix_socket/src/channel.dart' as _i3;
import 'package:phoenix_socket/src/events.dart' as _i6;
import 'package:phoenix_socket/src/exceptions.dart' as _i9;
import 'package:phoenix_socket/src/message.dart' as _i2;
import 'package:phoenix_socket/src/push.dart' as _i5;
import 'package:phoenix_socket/src/socket.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_1 extends _i1.SmartFake implements Uri {
  _FakeUri_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMessage_2 extends _i1.SmartFake implements _i2.Message {
  _FakeMessage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhoenixChannel_3 extends _i1.SmartFake
    implements _i3.PhoenixChannel {
  _FakePhoenixChannel_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhoenixSocket_4 extends _i1.SmartFake implements _i4.PhoenixSocket {
  _FakePhoenixSocket_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePush_5 extends _i1.SmartFake implements _i5.Push {
  _FakePush_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePushResponse_6 extends _i1.SmartFake implements _i5.PushResponse {
  _FakePushResponse_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePhoenixChannelEvent_7 extends _i1.SmartFake
    implements _i6.PhoenixChannelEvent {
  _FakePhoenixChannelEvent_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PhoenixSocket].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoenixSocket extends _i1.Mock implements _i4.PhoenixSocket {
  @override
  Map<String, _i3.PhoenixChannel> get channels => (super.noSuchMethod(
        Invocation.getter(#channels),
        returnValue: <String, _i3.PhoenixChannel>{},
        returnValueForMissingStub: <String, _i3.PhoenixChannel>{},
      ) as Map<String, _i3.PhoenixChannel>);

  @override
  set channels(Map<String, _i3.PhoenixChannel>? _channels) =>
      super.noSuchMethod(
        Invocation.setter(
          #channels,
          _channels,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Stream<_i6.PhoenixSocketOpenEvent> get openStream => (super.noSuchMethod(
        Invocation.getter(#openStream),
        returnValue: _i7.Stream<_i6.PhoenixSocketOpenEvent>.empty(),
        returnValueForMissingStub:
            _i7.Stream<_i6.PhoenixSocketOpenEvent>.empty(),
      ) as _i7.Stream<_i6.PhoenixSocketOpenEvent>);

  @override
  _i7.Stream<_i6.PhoenixSocketCloseEvent> get closeStream =>
      (super.noSuchMethod(
        Invocation.getter(#closeStream),
        returnValue: _i7.Stream<_i6.PhoenixSocketCloseEvent>.empty(),
        returnValueForMissingStub:
            _i7.Stream<_i6.PhoenixSocketCloseEvent>.empty(),
      ) as _i7.Stream<_i6.PhoenixSocketCloseEvent>);

  @override
  _i7.Stream<_i6.PhoenixSocketErrorEvent> get errorStream =>
      (super.noSuchMethod(
        Invocation.getter(#errorStream),
        returnValue: _i7.Stream<_i6.PhoenixSocketErrorEvent>.empty(),
        returnValueForMissingStub:
            _i7.Stream<_i6.PhoenixSocketErrorEvent>.empty(),
      ) as _i7.Stream<_i6.PhoenixSocketErrorEvent>);

  @override
  _i7.Stream<_i2.Message> get messageStream => (super.noSuchMethod(
        Invocation.getter(#messageStream),
        returnValue: _i7.Stream<_i2.Message>.empty(),
        returnValueForMissingStub: _i7.Stream<_i2.Message>.empty(),
      ) as _i7.Stream<_i2.Message>);

  @override
  String get nextRef => (super.noSuchMethod(
        Invocation.getter(#nextRef),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#nextRef),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#nextRef),
        ),
      ) as String);

  @override
  Duration get defaultTimeout => (super.noSuchMethod(
        Invocation.getter(#defaultTimeout),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#defaultTimeout),
        ),
        returnValueForMissingStub: _FakeDuration_0(
          this,
          Invocation.getter(#defaultTimeout),
        ),
      ) as Duration);

  @override
  String get endpoint => (super.noSuchMethod(
        Invocation.getter(#endpoint),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#endpoint),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#endpoint),
        ),
      ) as String);

  @override
  Uri get mountPoint => (super.noSuchMethod(
        Invocation.getter(#mountPoint),
        returnValue: _FakeUri_1(
          this,
          Invocation.getter(#mountPoint),
        ),
        returnValueForMissingStub: _FakeUri_1(
          this,
          Invocation.getter(#mountPoint),
        ),
      ) as Uri);

  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Stream<_i2.Message> streamForTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #streamForTopic,
          [topic],
        ),
        returnValue: _i7.Stream<_i2.Message>.empty(),
        returnValueForMissingStub: _i7.Stream<_i2.Message>.empty(),
      ) as _i7.Stream<_i2.Message>);

  @override
  _i7.Future<_i4.PhoenixSocket?> connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _i7.Future<_i4.PhoenixSocket?>.value(),
        returnValueForMissingStub: _i7.Future<_i4.PhoenixSocket?>.value(),
      ) as _i7.Future<_i4.PhoenixSocket?>);

  @override
  void close([
    int? code,
    String? reason,
    dynamic reconnect = false,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #close,
          [
            code,
            reason,
            reconnect,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i2.Message> waitForMessage(_i2.Message? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #waitForMessage,
          [message],
        ),
        returnValue: _i7.Future<_i2.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #waitForMessage,
            [message],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i2.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #waitForMessage,
            [message],
          ),
        )),
      ) as _i7.Future<_i2.Message>);

  @override
  _i7.Future<_i2.Message> sendMessage(_i2.Message? message) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [message],
        ),
        returnValue: _i7.Future<_i2.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #sendMessage,
            [message],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i2.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #sendMessage,
            [message],
          ),
        )),
      ) as _i7.Future<_i2.Message>);

  @override
  _i3.PhoenixChannel addChannel({
    required String? topic,
    Map<String, dynamic>? parameters,
    Duration? timeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addChannel,
          [],
          {
            #topic: topic,
            #parameters: parameters,
            #timeout: timeout,
          },
        ),
        returnValue: _FakePhoenixChannel_3(
          this,
          Invocation.method(
            #addChannel,
            [],
            {
              #topic: topic,
              #parameters: parameters,
              #timeout: timeout,
            },
          ),
        ),
        returnValueForMissingStub: _FakePhoenixChannel_3(
          this,
          Invocation.method(
            #addChannel,
            [],
            {
              #topic: topic,
              #parameters: parameters,
              #timeout: timeout,
            },
          ),
        ),
      ) as _i3.PhoenixChannel);

  @override
  void removeChannel(_i3.PhoenixChannel? channel) => super.noSuchMethod(
        Invocation.method(
          #removeChannel,
          [channel],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PhoenixChannel].
///
/// See the documentation for Mockito's code generation for more information.
class MockPhoenixChannel extends _i1.Mock implements _i3.PhoenixChannel {
  @override
  Map<String, dynamic> get parameters => (super.noSuchMethod(
        Invocation.getter(#parameters),
        returnValue: <String, dynamic>{},
        returnValueForMissingStub: <String, dynamic>{},
      ) as Map<String, dynamic>);

  @override
  _i4.PhoenixSocket get socket => (super.noSuchMethod(
        Invocation.getter(#socket),
        returnValue: _FakePhoenixSocket_4(
          this,
          Invocation.getter(#socket),
        ),
        returnValueForMissingStub: _FakePhoenixSocket_4(
          this,
          Invocation.getter(#socket),
        ),
      ) as _i4.PhoenixSocket);

  @override
  String get topic => (super.noSuchMethod(
        Invocation.getter(#topic),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#topic),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#topic),
        ),
      ) as String);

  @override
  List<_i5.Push> get pushBuffer => (super.noSuchMethod(
        Invocation.getter(#pushBuffer),
        returnValue: <_i5.Push>[],
        returnValueForMissingStub: <_i5.Push>[],
      ) as List<_i5.Push>);

  @override
  _i7.Stream<_i2.Message> get messages => (super.noSuchMethod(
        Invocation.getter(#messages),
        returnValue: _i7.Stream<_i2.Message>.empty(),
        returnValueForMissingStub: _i7.Stream<_i2.Message>.empty(),
      ) as _i7.Stream<_i2.Message>);

  @override
  String get joinRef => (super.noSuchMethod(
        Invocation.getter(#joinRef),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#joinRef),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#joinRef),
        ),
      ) as String);

  @override
  _i3.PhoenixChannelState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _i3.PhoenixChannelState.closed,
        returnValueForMissingStub: _i3.PhoenixChannelState.closed,
      ) as _i3.PhoenixChannelState);

  @override
  bool get canPush => (super.noSuchMethod(
        Invocation.getter(#canPush),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get loggerName => (super.noSuchMethod(
        Invocation.getter(#loggerName),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#loggerName),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#loggerName),
        ),
      ) as String);

  @override
  String get reference => (super.noSuchMethod(
        Invocation.getter(#reference),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#reference),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#reference),
        ),
      ) as String);

  @override
  _i7.Future<_i2.Message> onPushReply(_i6.PhoenixChannelEvent? replyEvent) =>
      (super.noSuchMethod(
        Invocation.method(
          #onPushReply,
          [replyEvent],
        ),
        returnValue: _i7.Future<_i2.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #onPushReply,
            [replyEvent],
          ),
        )),
        returnValueForMissingStub: _i7.Future<_i2.Message>.value(_FakeMessage_2(
          this,
          Invocation.method(
            #onPushReply,
            [replyEvent],
          ),
        )),
      ) as _i7.Future<_i2.Message>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trigger(_i2.Message? message) => super.noSuchMethod(
        Invocation.method(
          #trigger,
          [message],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void triggerError(_i9.PhoenixException? error) => super.noSuchMethod(
        Invocation.method(
          #triggerError,
          [error],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Push leave({Duration? timeout}) => (super.noSuchMethod(
        Invocation.method(
          #leave,
          [],
          {#timeout: timeout},
        ),
        returnValue: _FakePush_5(
          this,
          Invocation.method(
            #leave,
            [],
            {#timeout: timeout},
          ),
        ),
        returnValueForMissingStub: _FakePush_5(
          this,
          Invocation.method(
            #leave,
            [],
            {#timeout: timeout},
          ),
        ),
      ) as _i5.Push);

  @override
  _i5.Push join([Duration? newTimeout]) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [newTimeout],
        ),
        returnValue: _FakePush_5(
          this,
          Invocation.method(
            #join,
            [newTimeout],
          ),
        ),
        returnValueForMissingStub: _FakePush_5(
          this,
          Invocation.method(
            #join,
            [newTimeout],
          ),
        ),
      ) as _i5.Push);

  @override
  _i5.Push push(
    String? eventName,
    Map<String, dynamic>? payload, [
    Duration? newTimeout,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [
            eventName,
            payload,
            newTimeout,
          ],
        ),
        returnValue: _FakePush_5(
          this,
          Invocation.method(
            #push,
            [
              eventName,
              payload,
              newTimeout,
            ],
          ),
        ),
        returnValueForMissingStub: _FakePush_5(
          this,
          Invocation.method(
            #push,
            [
              eventName,
              payload,
              newTimeout,
            ],
          ),
        ),
      ) as _i5.Push);

  @override
  _i5.Push pushEvent(
    _i6.PhoenixChannelEvent? event,
    Map<String, dynamic>? payload, [
    Duration? newTimeout,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushEvent,
          [
            event,
            payload,
            newTimeout,
          ],
        ),
        returnValue: _FakePush_5(
          this,
          Invocation.method(
            #pushEvent,
            [
              event,
              payload,
              newTimeout,
            ],
          ),
        ),
        returnValueForMissingStub: _FakePush_5(
          this,
          Invocation.method(
            #pushEvent,
            [
              event,
              payload,
              newTimeout,
            ],
          ),
        ),
      ) as _i5.Push);
}

/// A class which mocks [Push].
///
/// See the documentation for Mockito's code generation for more information.
class MockPush extends _i1.Mock implements _i5.Push {
  @override
  set timeout(Duration? _timeout) => super.noSuchMethod(
        Invocation.setter(
          #timeout,
          _timeout,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i7.Future<_i5.PushResponse> get future => (super.noSuchMethod(
        Invocation.getter(#future),
        returnValue: _i7.Future<_i5.PushResponse>.value(_FakePushResponse_6(
          this,
          Invocation.getter(#future),
        )),
        returnValueForMissingStub:
            _i7.Future<_i5.PushResponse>.value(_FakePushResponse_6(
          this,
          Invocation.getter(#future),
        )),
      ) as _i7.Future<_i5.PushResponse>);

  @override
  bool get sent => (super.noSuchMethod(
        Invocation.getter(#sent),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get ref => (super.noSuchMethod(
        Invocation.getter(#ref),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#ref),
        ),
        returnValueForMissingStub: _i8.dummyValue<String>(
          this,
          Invocation.getter(#ref),
        ),
      ) as String);

  @override
  _i6.PhoenixChannelEvent get replyEvent => (super.noSuchMethod(
        Invocation.getter(#replyEvent),
        returnValue: _FakePhoenixChannelEvent_7(
          this,
          Invocation.getter(#replyEvent),
        ),
        returnValueForMissingStub: _FakePhoenixChannelEvent_7(
          this,
          Invocation.getter(#replyEvent),
        ),
      ) as _i6.PhoenixChannelEvent);

  @override
  bool hasReceived(String? status) => (super.noSuchMethod(
        Invocation.method(
          #hasReceived,
          [status],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i7.Future<void> send() => (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  _i7.Future<void> resend(Duration? newTimeout) => (super.noSuchMethod(
        Invocation.method(
          #resend,
          [newTimeout],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);

  @override
  void onReply(
    String? status,
    _i5.ReceiverCallback? callback,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onReply,
          [
            status,
            callback,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void startTimeout() => super.noSuchMethod(
        Invocation.method(
          #startTimeout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cancelTimeout() => super.noSuchMethod(
        Invocation.method(
          #cancelTimeout,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void trigger(_i5.PushResponse? response) => super.noSuchMethod(
        Invocation.method(
          #trigger,
          [response],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearReceivers() => super.noSuchMethod(
        Invocation.method(
          #clearReceivers,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void cleanUp() => super.noSuchMethod(
        Invocation.method(
          #cleanUp,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
